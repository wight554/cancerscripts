#!/usr/bin/env bash

# Copyright (C) Volodymyr Zhdanov <wight554@gmail.com>
# SPDX-License-Identifier: GPL-3.0-only

# Gather parameters
function parse_parameters()
{
  while [[ "${#}" -ge 1 ]]; do
    case "${1}" in
      "-bt"|"--buildtype")
        shift && enforce_value "${@}"
        BUILDTYPE="${1}" ;;

      "-r"|"--rom")
        shift && enforce_value "${@}"
        ROM="${1}" ;;

      "-d"|"--device")
        shift && enforce_value "${@}"
        DEVICE="${1}" ;;

      "-p"|"--package")
        shift && enforce_value "${@}"
        PACKAGE="${1}" ;;

      *) die "Invalid parameter specified!" ;;
    esac
    shift
  done

  # Default parameters
  [[ -z "${ROM}" ]] && ROM="nitrogen"
  [[ -z "${DEVICE}" ]] && DEVICE="chiron"
  [[ -z "${BUILDTYPE}" ]] && BUILDTYPE="personal"

  # Sanity checks
  [[ "${BUILDTYPE}" != "personal" && "${BUILDTYPE}" != "test" ]] && die "Choose build type between personal and test"
  [[ -z "${PACKAGE}" ]] && die "Package should be specified!"
  [[ -z "${TOKEN}" && -z "${CHATID}" ]] && die "Telegram bot checks are not satisfied!"
}

function buildpackage()
{

  # Deodex is cool
  export WITH_DEXPREOPT_BOOT_IMG_AND_SYSTEM_SERVER_ONLY=true

  # Cleanup first
  mka installclean

  # Compilation
  info "Compiling ${PACKAGE} for ${DEVICE}..."
  mka "${PACKAGE}" 2>&1 | tee "${LOGS_DIR}/buildpackage.log"
}

function filteroutput()
{
  # Split output files into array for upload
  mapfile -t TMPOUTPUT < <(find "${ROM_PATH}/out/target/product/${DEVICE}/"{system,vendor} -name "${PACKAGE}*" -type f 2>/dev/null)

  # I don't want this hardcode to be here but it's needed :(
  for FILE in "${TMPOUTPUT[@]}"
  do
    [[ "${FILE}" =~ "${PACKAGE}"*[^a-zA-Z^_] || "$( basename "${FILE}" )" == "${PACKAGE}" ]] && OUTPUT+=("${FILE}")
  done
  export OUTPUT
}

#####################
##  RUN THEM ALL!  ##
#####################

# Common script
source "$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" || return; pwd)/common"

# Print formatted message about build start
startscript

# Parse parameters and setup enviroment
parse_parameters "${@}"
romenviroment

# Compile package
buildpackage

# Filter output packages
filteroutput

# Check if compilation is fine
checkoutput

# Upload if needed
personal_upload

# Print formatted message about script ending
endscript

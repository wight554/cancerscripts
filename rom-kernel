#!/usr/bin/env bash

# Copyright (C) Volodymyr Zhdanov <wight554@gmail.com>
# SPDX-License-Identifier: GPL-3.0-only

# Gather parameters
function parse_parameters()
{
  while [[ "${#}" -ge 1 ]]; do
    case "${1}" in
      "-bt"|"--buildtype")
        shift && enforce_value "${@}"
        BUILDTYPE="${1}" ;;

      "-d"|"--device")
        shift && enforce_value "${@}"
        DEVICE="${1}" ;;

      "-r"|"--rom")
        shift && enforce_value "${@}"
        ROM="${1}" ;;

      "-ak"|"--anykernel")
        ANYKERNEL=true ;;

      *) die "Invalid parameter specified!" ;;
    esac
    shift
  done

  # Default parameters
  [[ -z "${ROM}" ]] && ROM="nitrogen"
  [[ -z "${DEVICE}" ]] && DEVICE="chiron"
  [[ -z "${BUILDTYPE}" ]] && BUILDTYPE="personal"

  # Sanity checks
  [[ "${BUILDTYPE}" != "personal" && "${BUILDTYPE}" != "test" ]] && die "Choose build type between personal and test"
  [[ -z "${TOKEN}" && -z "${CHATID}" ]] && die "Telegram bot checks are not satisfied!"
}

# Build kernel image by using ROM sources
function buildromkernel() {
  # Small cleanup
  info "Removing old images..."
  rm -f "${BUILD_PATH}/boot.img"
  rm -f "${BUILD_PATH}/kernel"

  # Compilation
  info "Compiling boot and kernel images for ${DEVICE}..."
  mka bootimage 2>&1 | tee "${LOGS_DIR}/buildromkernel.log"

  # Export output image for anykernel2
  export COMPILED_IMAGE="${BUILD_PATH}/kernel"
}

# If anykernel is chosen we compress kernel image into Anykernel2 zip
# Otherwise we use bootimage as output for further commands
function choose_output() {
  if [[ -n "${ANYKERNEL}" ]]
  then
    ramdisk # Anykernel2 zipping
  else
    export OUTPUT="${BUILD_PATH}/boot.img"
  fi
}

#####################
##  RUN THEM ALL!  ##
#####################

# Common script
source "$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" || return; pwd)/common"

# If parameters are satisfied, print formatted message about build start
parse_parameters "${@}"
startscript

# Setup enviroment
romenviroment

# Compile boot and kernel images
buildromkernel

# Choose which image to use as output one
choose_output

# Check if compilation is fine
checkoutput

# Upload if needed
personal_upload

# Print formatted message about script ending
endscript

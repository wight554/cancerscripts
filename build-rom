#!/usr/bin/env bash

# Copyright (C) Volodymyr Zhdanov <wight554@gmail.com>
# SPDX-License-Identifier: GPL-3.0-only

# Gather parameters
function parse_parameters()
{
  while [[ "${#}" -ge 1 ]]; do
    case "${1}" in
      "-bt"|"--buildtype")
        shift && enforce_value "${@}"
        BUILDTYPE="${1}" ;;

      "-d"|"--device")
        shift && enforce_value "${@}"
        DEVICE="${1}" ;;

      "-r"|"--rom")
        shift && enforce_value "${@}"
        ROM="${1}" ;;

      "-o"|"--off")
        export POWEROFF=true ;;

      "-c"|"--clean")
        CLEAN=true ;;

      "-s"|"--sync")
        SYNC=true ;;

      *) die "Invalid parameter specified!" ;;
    esac
    shift
  done

  # Default parameters
  [[ -z "${ROM}" ]] && ROM="nitrogen"
  [[ -z "${DEVICE}" ]] && DEVICE="chiron"
  [[ -z "${BUILDTYPE}" ]] && BUILDTYPE="personal"

  # Sanity checks
  [[ "${BUILDTYPE}" != "personal" && "${BUILDTYPE}" != "test" && "${BUILDTYPE}" != "release" ]] && die "Choose build type between personal, release and test!"
  [[ -z "${TOKEN}" && -z "${CHATID}" ]] && die "Telegram bot checks are not satisfied!"
}

# Pretty small one
function sync()
{
  if [[ -n "${SYNC}" ]]
  then
    repo sync
  fi
}

# Go clean if needed, otherwise installclean
function clean()
{
  if [[ -n "${CLEAN}" ]]
  then
    info "Cleaning build directory..."
    mka clobber
  else
    info "Clean not specified, go installclean..."
    mka installclean
  fi
}

function buildrom()
{
  #  Start compilation
  info "Compiling ${ROM} for ${DEVICE}..."
  mka bacon 2>&1 | tee "${LOGS_DIR}/buildrom.log"
}

function getoutput()
{
  FILENAME="$(basename "$(find "${ROM_PATH}/out/target/product/${DEVICE}" -maxdepth 1 -iname "${ROM}*${DATE}*.zip")")"
  if [ "${ROM}" == "nitrogen" ]
  then
    [[ "${BUILDTYPE}" == "personal" ]] && FILENAME="${FILENAME/./-UNSTABLE.}"
    [[ "${BUILDTYPE}" == "test" ]] && FILENAME="${FILENAME/./-TEST.}"
  fi
  mv "${ROM_PATH}/signed-ota_update.zip" "${ROM_PATH}/${FILENAME}"
  OUTPUT="${ROM_PATH}/${FILENAME}"
  [ "${ROM}" == "nitrogen" ] && CHANGELOG="${ROM_PATH}/out/target/product/${DEVICE}/nitrogen_${DEVICE}-Changelog.txt"
}

function upload()
{
  SF="https://sourceforge.net"
  FRS="wight554@web.sourceforge.net:/home/frs"
  [[ "${BUILDTYPE}" == "personal" ]] && CHATID="${PM}"
  info "Uploading ${FILENAME} to wight554.tk..." && rsync -av -e ssh "${OUTPUT}" "${FRS}/project/wightroms/${ROM}/${FILENAME}"
  telegram_notify "${FILENAME} can be downloaded [here](${SF}/projects/wightroms/files/${ROM}/${FILENAME}"
  [[ "${BUILDTYPE}" != "personal" ]] && info "Uploading changelog to Telegram..." && telegram_upload "${CHANGELOG}"
}

#####################
##  RUN THEM ALL!  ##
#####################

# Common script
source "$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" || return; pwd)/common"

# ROM sign
source "$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" || return; pwd)/snippets/rom_sign"

# If parameters are satisfied, print formatted message about build start
parse_parameters "${@}"
startscript

# Setup enviroment
romenviroment

# Sync if needed
sync

# Cleanup
clean

# Compile ROM
buildrom

# Sign build
rom_sign

# Get compilation result
getoutput

# Check if compilation is fine
checkoutput

# Upload if needed
upload

# Print formatted message about script ending
endscript

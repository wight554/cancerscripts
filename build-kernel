#!/usr/bin/env bash

# Copyright (C) Volodymyr Zhdanov <wight554@gmail.com>
# SPDX-License-Identifier: GPL-3.0-only

# Gather parameters
function parse_parameters()
{
  while [[ "${#}" -ge 1 ]]; do
    case "${1}" in
      "-bt"|"--buildtype")
        shift && enforce_value "${@}"
        BUILDTYPE="${1}" ;;

      "-d"|"--device")
        shift && enforce_value "${@}"
        DEVICE="${1}" ;;

      "-t"|"--toolchain")
        shift && enforce_value "${@}"
        TOOLCHAIN="${1}" ;;

      "-c"|"--clean")
        CLEAN=true ;;

      "-m"|"--miui")
        export MIUI="-miui"
	TOOLCHAIN="clang" ;;

      *) die "Invalid parameter specified!" ;;
    esac
    shift
done
  # Default parameters
  [[ -z "${DEVICE}" ]] && DEVICE="chiron"
  [[ -z "${TOOLCHAIN}" ]] && TOOLCHAIN="gcc"
  [[ -z "${BUILDTYPE}" ]] && BUILDTYPE="personal"

  # Sanity checks
  [[ "${BUILDTYPE}" != "personal" && "${BUILDTYPE}" != "test" ]] && die "Choose build type between personal and test"
  [[ "${TOOLCHAIN}" != "clang" && "${TOOLCHAIN}" != "gcc" ]] && die "Dafuq u wanna build with?"
  [[ -z "${TOKEN}" && -z "${CHATID}" ]] && die "Telegram bot checks are not satisfied!"
}

function enviroment()
{
  info "Setting up build enviroment.."
  sleep 1

  # Build dirs
  KERNEL_DIR="${HOME}/linux/${DEVICE}"
  BUILD_DIR="${HOME}/linux/build-${DEVICE}"
  [[ ! -d "${BUILD_DIR}" ]] && warn "Build directory doesn't exist..."; mkdir -p "${BUILD_DIR}";

  # Defconfig
  DEFCONFIG="${DEVICE}${MIUI}_defconfig"

  # COMPILED_IMAGE
  export COMPILED_IMAGE="${BUILD_DIR}/arch/arm64/boot/Image.gz-dtb"

  # Changelog
  export CHANGELOG_PATH="${HOME}/changelogs/Changelog-${DEVICE}-${DATE}.txt"

  # GCC 32-bit paths variables
  GCC_32_FOLDER="${HOME}/toolchains/gcc-arm-8.x-arm-linux-gnueabi"
  GCC_32="$(find "${GCC_32_FOLDER}/bin" \( -type f -o -type l \) -name '*-gcc' | head -n1)"
  CC_32="${GCC_32%gcc}"

  # GCC 64-bin paths variables
  GCC_64_FOLDER="${HOME}/toolchains/gcc-arm-8.x-aarch64-linux-gnu"
  GCC_64="$(find "${GCC_64_FOLDER}/bin" \( -type f -o -type l \) -name '*-gcc' | head -n1)"
  CC_64="${GCC_64%gcc}"

  # Clang paths variables
  CLANG_FOLDER="$(find "${HOME}"/toolchains/linux-x86/clang-r* -maxdepth 0 -type d | tail -1)"
  CLANG="${CLANG_FOLDER}/bin/clang"
  CLANG_VERSION="$("${CLANG}" --version | head -n 1 | perl -pe 's/(  | |)\(.*?\)//g')"
}
function clean()
{
  # Cleanup build directory if needed otherwise clean dtb only
  if [[ -n "${CLEAN}" ]]
  then
    info "Cleaning build directory..."
    rm -rf "${BUILD_DIR}" && mkdir -p "${BUILD_DIR}"
  else
    info "Cleaning DTBs directory..."
    sleep 1
    rm -rf "${BUILD_DIR}/arch/arm64/boot/dts/qcom/"
  fi
}

function buildkernel()
{
  # Open kernel directory
  cd "${KERNEL_DIR}" || endscript "Kernel directory doesn't exist!"
  info "Compiling kernel..."
  # Generate defconfig
  make -s ARCH="arm64" O="${BUILD_DIR}" "${DEFCONFIG}" "${JOBS_FLAG}"
  # Build kernel
  if [ "${TOOLCHAIN}" == "clang" ]
  then
    make O="${BUILD_DIR}" "${JOBS_FLAG}" \
		ARCH="arm64" \
		CC="${CCACHE} ${CLANG}" \
		CLANG_TRIPLE="aarch64-linux-gnu-" \
		KBUILD_COMPILER_STRING="${CLANG_VERSION}" \
		KCFLAGS="${KCFLAGS}" \
		CROSS_COMPILE="${CC_64}" \
    CROSS_COMPILE_ARM32="${CC_32}" \
		Image.gz-dtb
  elif [ "${TOOLCHAIN}" == "gcc" ]
  then
    make O="${BUILD_DIR}" "${JOBS_FLAG}" \
		ARCH="arm64" \
		CROSS_COMPILE="${CCACHE} ${CC_64}" \
    CROSS_COMPILE_ARM32="${CC_32}" \
		Image.gz-dtb
  fi
}

# Changelog for specified repo (last week)
function generate_changelog()
{
  cd "${KERNEL_DIR}" || endscript "Kernel dir doesn't exist!"
  if [[ -f "${CHANGELOG_PATH}" ]]
  then
    rm -f "${CHANGELOG_PATH}"
  fi
  for i in $(seq 7)
  do
    AFTER="$(date --date="${i} days ago" +%F)"
    UNTIL="$(date --date="$((i -1)) days ago" +%F)"
    {
      echo "####################"
      echo "     ${UNTIL}"
      echo "####################"
      git log --after="${AFTER}" --until="${UNTIL}" --pretty=tformat:"%h  %s  [%an]"
      echo ""
    } >> "${CHANGELOG_PATH}"
  done
}

function upload()
{
  if [[ "${BUILDTYPE}" == "test" ]]
  then
    info "Uploading $( basename "${OUTPUT}" ) to Telegram..." && telegram_upload "${OUTPUT}"
    info "Uploading changelog to Telegram..." && telegram_upload "${CHANGELOG_PATH}"
  else
    personal_upload
  fi
}

#####################
##  RUN THEM ALL!  ##
#####################

# Common script
source "$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" || return; pwd)/common"

# If parameters are satisfied, print formatted message about build start
parse_parameters "${@}"
startscript

# Setup enviroment
enviroment

# Cleanup
clean

# Compile kernel image
buildkernel

# Make Anykernel2 zip
ramdisk

# Check if compilation is fine
checkoutput

# Generate changelog
generate_changelog

# Upload if needed
upload

# Print formatted message about script ending
endscript
